/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: wallmasterr (https://sketchfab.com/wallmasterr)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/tenhun-falling-spaceman-fanart-9fd80b6a259f41fd99e6f56eee686dc5
Title: Tenhun Falling spaceman (FanArt)
*/
import { useSpring } from 'framer-motion'
import React, { useEffect, useRef, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useMotionValue } from 'framer-motion'
import { useFrame } from '@react-three/fiber'

export function Astronaut(props) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/models/tenhun_falling_spaceman_fanart.glb')
  const { actions } = useAnimations(animations, group)
  const [scrollY, setScrollY] = useState(0)
    
  useEffect(() => {
    if(animations.length>0){
        actions[animations[0].name]?.play();
    }
},[actions,animations])

const yPosition = useMotionValue(5);
const ySpring = useSpring(yPosition, { stiffness: 20, damping: 30 });
useEffect(()=>{
    ySpring.set(-1);
},[ySpring])

// Add scroll listener for Lenis integration
useEffect(() => {
  const handleLenisScroll = (e) => {
    // Use Lenis scroll progress for smoother integration
    const scrollProgress = e.detail.progress || 0;
    setScrollY(scrollProgress);
  };

  // Listen for Lenis scroll events
  window.addEventListener('lenisScroll', handleLenisScroll);
  
  // Fallback for native scroll if Lenis isn't available
  const handleNativeScroll = () => {
    const scrollProgress = window.scrollY / (document.documentElement.scrollHeight - window.innerHeight);
    setScrollY(scrollProgress);
  };

  window.addEventListener('scroll', handleNativeScroll);
  
  // Cleanup
  return () => {
    window.removeEventListener('lenisScroll', handleLenisScroll);
    window.removeEventListener('scroll', handleNativeScroll);
  };
}, []);

useFrame((state)=>{
    const time = state.clock.elapsedTime;
    
    // Original falling animation (keep unchanged)
    const baseY = ySpring.get();
    
    // Get original position from props (preserve desktop positioning)
    const originalPosition = props.position || [1.3, -1.0, 0];
    const baseX = originalPosition[0]; // Preserve original X position
    
    // Get original scale from props
    const originalScale = props.scale || 0.3;
    
    // Bidirectional scroll effects
    const scrollInfluence = scrollY * 1.5;
    const sideMovement = Math.sin(scrollY * 3) * 0.1; // Reduced intensity
    const scaleChange = scrollY * 0.15; // Scale decreases as you scroll
    
    // Apply position changes while preserving original positioning
    group.current.position.y = baseY - scrollInfluence; // Base position minus scroll effect
    group.current.position.x = baseX + sideMovement; // Original X + subtle scroll movement
    
    // Apply scale changes (shrink as you scroll down)
    group.current.scale.setScalar(originalScale - scaleChange);
    
    // Bidirectional scroll-based rotations
    group.current.rotation.x = -Math.PI / 2 + (scrollY * 0.3);
    group.current.rotation.z = 2.2 + (scrollY * 1.2) + Math.sin(time * 0.2) * 0.1;
    
    // Keep hand movement
    group.current.rotation.y = -0.2 + Math.sin(time * 0.4) * 0.15;
})

  return (
    <group ref={group} {...props} dispose={null}
     rotation={[-Math.PI / 2, -0.2, 2.2]} 
     scale={props.scale || 0.3}
     position={props.position || [1.3, -1.0, 0]} >
     
     
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model">
          <group name="Root">
            <group name="metarig">
              <primitive object={nodes.metarig_rootJoint} />
              <skinnedMesh
                name="Cube001_0"
                geometry={nodes.Cube001_0.geometry}
                material={materials['AstronautFallingTexture.png']}
                skeleton={nodes.Cube001_0.skeleton}
              />
              <skinnedMesh
                name="Cube005_0"
                geometry={nodes.Cube005_0.geometry}
                material={materials['AstronautFallingTexture.png']}
                skeleton={nodes.Cube005_0.skeleton}
              />
              <skinnedMesh
                name="Cube002_0"
                geometry={nodes.Cube002_0.geometry}
                material={materials['AstronautFallingTexture.png']}
                skeleton={nodes.Cube002_0.skeleton}
              />
              <skinnedMesh
                name="Plane_0"
                geometry={nodes.Plane_0.geometry}
                material={materials['AstronautFallingTexture.png']}
                skeleton={nodes.Plane_0.skeleton}
              />
              <skinnedMesh
                name="Cube008_0"
                geometry={nodes.Cube008_0.geometry}
                material={materials['AstronautFallingTexture.png']}
                skeleton={nodes.Cube008_0.skeleton}
              />
              <skinnedMesh
                name="Cube004_0"
                geometry={nodes.Cube004_0.geometry}
                material={materials['AstronautFallingTexture.png']}
                skeleton={nodes.Cube004_0.skeleton}
              />
              <skinnedMesh
                name="Cube003_0"
                geometry={nodes.Cube003_0.geometry}
                material={materials['AstronautFallingTexture.png']}
                skeleton={nodes.Cube003_0.skeleton}
              />
              <skinnedMesh
                name="Cube_0"
                geometry={nodes.Cube_0.geometry}
                material={materials['AstronautFallingTexture.png']}
                skeleton={nodes.Cube_0.skeleton}
              />
              <skinnedMesh
                name="Cube009_0"
                geometry={nodes.Cube009_0.geometry}
                material={materials['AstronautFallingTexture.png']}
                skeleton={nodes.Cube009_0.skeleton}
              />
              <skinnedMesh
                name="Cube011_0"
                geometry={nodes.Cube011_0.geometry}
                material={materials['AstronautFallingTexture.png']}
                skeleton={nodes.Cube011_0.skeleton}
              />
              <group name="Cube001" />
              <group name="Cube005" />
              <group name="Cube002" />
              <group name="Plane" />
              <group name="Cube008" />
              <group name="Cube004" />
              <group name="Cube003" />
              <group name="Cube" />
              <group name="Cube009" rotation={[-2.708, 0.013, -1.447]} scale={1.307} />
              <group name="Cube011" />
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/tenhun_falling_spaceman_fanart.glb')

